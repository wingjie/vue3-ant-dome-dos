let $;(()=>{if($)return $;const e="[a-fA-F\\d:]",n=$=>$&&$.includeBoundaries?`(?:(?<=\\s|^)(?=${e})|(?<=${e})(?=\\s|$))`:"",r="(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}",t="[a-fA-F\\d]{1,4}",a=`\n(?:\n(?:${t}:){7}(?:${t}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:${t}:){6}(?:${r}|:${t}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:${t}:){5}(?::${r}|(?::${t}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:${t}:){4}(?:(?::${t}){0,1}:${r}|(?::${t}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:${t}:){3}(?:(?::${t}){0,2}:${r}|(?::${t}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:${t}:){2}(?:(?::${t}){0,3}:${r}|(?::${t}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:${t}:){1}(?:(?::${t}){0,4}:${r}|(?::${t}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::(?:(?::${t}){0,5}:${r}|(?::${t}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\n`.replace(/\s*\/\/.*$/gm,"").replace(/\n/g,"").trim(),s=new RegExp(`(?:^${r}$)|(?:^${a}$)`),f=new RegExp(`^${r}$`),o=new RegExp(`^${a}$`),c=$=>$&&$.exact?s:new RegExp(`(?:${n($)}${r}${n($)})|(?:${n($)}${a}${n($)})`,"g");c.v4=$=>$&&$.exact?f:new RegExp(`${n($)}${r}${n($)}`,"g"),c.v6=$=>$&&$.exact?o:new RegExp(`${n($)}${a}${n($)}`,"g");const p=c.v4().source,u=c.v6().source;$=new RegExp(`(?:^${`(?:(?:(?:[a-z]+:)?//)|www\\.)(?:\\S+(?::\\S*)?@)?(?:localhost|${p}|${u}|(?:(?:[a-z\\u00a1-\\uffff0-9][-_]*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#][^\\s"]*)?`}$)`,"i")})();const e="(25[0-5]|2[0-4]\\d|((1\\d{2})|([1-9]?\\d)))",n=`(${e}(\\.${e}){3})`,r=`(${n}-${n})`,t=`(${n} ${n})`,a=`(${t}|${`(${n}|${`(${n}\\/${/([1-2]\d|3[0-2]|\d)/.source})`})`})`,s=`(${e}(\\/${e})*)`,f=`(${s}(-${s})?)`,o=`((${`(${f}(\\/${f})*)`})|(\\*))`,c=`(((${o})(\\.${o}){3})P?)`,p=new RegExp("[,|\n]"),u={A:n,S:a,R:r,W:t,P:c,Y:"(Any)"};function d($="ASRWYPL",e){/^[ASRWYPL]*$/g.test($?.toUpperCase());let n=$?.toUpperCase();const r=$?.toUpperCase().includes("L");r&&(n=$.replace(/L/g,""));const t=Array.from(n).map(($=>u[$])).join("|"),a=r?`(((${t})([,|\n]*))*)`:`(${t})`;return"reg"===e?new RegExp(`^${a}$`):async function($,e){const n=new RegExp(`^${a}$`).test(e);if(e&&!n)return Promise.reject(new Error("格式错误"));const r=e?e.split(p):[],t=[...new Set(r)];return r.length!==t.length?Promise.reject(new Error("数据重复")):Promise.resolve(!0)}}export{d as v};
