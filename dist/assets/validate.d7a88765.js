const e="(25[0-5]|2[0-4]\\d|((1\\d{2})|([1-9]?\\d)))",r=`(${e}(\\.${e}){3})`,$=`(${r}-${r})`,n=`(${r} ${r})`,t=`(${n}|${`(${r}|${`(${r}\\/${/([1-2]\d|3[0-2]|\d)/.source})`})`})`,o=`(${e}(\\/${e})*)`,s=`(${o}(-${o})?)`,c=`((${`(${s}(\\/${s})*)`})|(\\*))`,p=`(((${c})(\\.${c}){3})P?)`,i=new RegExp("[,|\n]"),a={A:r,S:t,R:$,W:n,P:p,Y:"(Any)"};function l(e="ASRWYPL"){/^[ASRWYPL]*$/g.test(e?.toUpperCase());let r=e?.toUpperCase();const $=e?.toUpperCase().includes("L");$&&(r=e.replace(/L/g,""));const n=Array.from(r).map((e=>a[e])).join("|"),t=$?`(((${n})([,|\n]*))*)`:`(${n})`;return async function(e,r){const $=new RegExp(`^${t}$`).test(r);if(r&&!$)return Promise.reject(new Error("格式错误"));const n=r?r.split(i):[],o=[...new Set(n)];return n.length!==o.length?Promise.reject(new Error("数据重复")):Promise.resolve(!0)}}export{l as v};
